// Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/card/new": {
            "post": {
                "description": "Inserts a new Card",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Card"
                ],
                "summary": "Insert Card",
                "parameters": [
                    {
                        "type": "integer",
                        "example": 1,
                        "description": "count example",
                        "name": "payer_id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "description": "Card example",
                        "name": "example",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.CardRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.CardResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httputil.HTTPError400"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/httputil.HTTPError404"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/httputil.HTTPError500"
                        }
                    }
                }
            }
        },
        "/card/{id}": {
            "get": {
                "description": "Get one Card from ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Card"
                ],
                "summary": "Select Card",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "example: 1",
                        "name": "int",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.CardResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httputil.HTTPError400"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/httputil.HTTPError404"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/httputil.HTTPError500"
                        }
                    }
                }
            }
        },
        "/order/new": {
            "post": {
                "description": "save Order in database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Order"
                ],
                "summary": "Insert Order",
                "parameters": [
                    {
                        "type": "integer",
                        "example": 1,
                        "description": "start example",
                        "name": "payer_id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "description": "Order example",
                        "name": "example",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.OrderRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.OrderResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httputil.HTTPError400"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/httputil.HTTPError404"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/httputil.HTTPError500"
                        }
                    }
                }
            }
        },
        "/order/orders": {
            "get": {
                "description": "Select all Orders",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Order"
                ],
                "summary": "Select all Orders",
                "parameters": [
                    {
                        "type": "integer",
                        "example": 0,
                        "description": "start example",
                        "name": "start",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "example": 10,
                        "description": "count example",
                        "name": "count",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "example": 1,
                        "description": "payerId example",
                        "name": "payerId",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.OrderResponse"
                            }
                        }
                    }
                }
            }
        },
        "/order/{id}": {
            "get": {
                "description": "Get one Order from ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Order"
                ],
                "summary": "Select Order",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "example: 1",
                        "name": "int",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.OrderResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httputil.HTTPError400"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/httputil.HTTPError404"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/httputil.HTTPError500"
                        }
                    }
                }
            }
        },
        "/payer/cards": {
            "get": {
                "description": "?payer_id=1",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Payer"
                ],
                "summary": "Get all cards from payer id",
                "parameters": [
                    {
                        "type": "integer",
                        "example": 1,
                        "description": "payer_id example",
                        "name": "payer_id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.CardResponse"
                            }
                        }
                    }
                }
            }
        },
        "/payer/new": {
            "post": {
                "description": "save payer in database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Payer"
                ],
                "summary": "Insert Payer",
                "parameters": [
                    {
                        "description": "Payer example",
                        "name": "example",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.Payer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.PayerResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httputil.HTTPError400"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/httputil.HTTPError404"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/httputil.HTTPError500"
                        }
                    }
                }
            }
        },
        "/payer/payers": {
            "get": {
                "description": "Select all Payers",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Payer"
                ],
                "summary": "Select all Payers",
                "parameters": [
                    {
                        "type": "integer",
                        "example": 0,
                        "description": "start example",
                        "name": "start",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "example": 10,
                        "description": "count example",
                        "name": "count",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.PayerResponse"
                            }
                        }
                    }
                }
            }
        },
        "/payer/setCard": {
            "put": {
                "description": "?payer_id=1\u0026card_id=1",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Payer"
                ],
                "summary": "Sets Payers primary card",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "example: 1",
                        "name": "payer_id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "example: 1",
                        "name": "card_id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.PayerResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httputil.HTTPError400"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/httputil.HTTPError404"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/httputil.HTTPError500"
                        }
                    }
                }
            }
        },
        "/payer/update/{id}": {
            "put": {
                "description": "Updates a payer in database (id req)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Payer"
                ],
                "summary": "Updates Payer",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "example: 1",
                        "name": "id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "description": "Payer example",
                        "name": "example",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.Payer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.PayerResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httputil.HTTPError400"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/httputil.HTTPError404"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/httputil.HTTPError500"
                        }
                    }
                }
            }
        },
        "/payer/{id}": {
            "get": {
                "description": "Get one Payer from ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Payer"
                ],
                "summary": "Select Payer",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "example: 1",
                        "name": "int",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.PayerResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httputil.HTTPError400"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/httputil.HTTPError404"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/httputil.HTTPError500"
                        }
                    }
                }
            }
        },
        "/payment/new": {
            "post": {
                "description": "Creates a new payment with dlocal",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Payment"
                ],
                "summary": "New Payment",
                "parameters": [
                    {
                        "type": "integer",
                        "example": 1,
                        "description": "order_id example",
                        "name": "order_id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.PaymentResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httputil.HTTPError400"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/httputil.HTTPError404"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/httputil.HTTPError500"
                        }
                    }
                }
            }
        },
        "/payment/payments": {
            "get": {
                "description": "Select all Payments",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Payment"
                ],
                "summary": "Select all Payments",
                "parameters": [
                    {
                        "type": "integer",
                        "example": 0,
                        "description": "start example",
                        "name": "start",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "example": 10,
                        "description": "count example",
                        "name": "count",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "example": 1,
                        "description": "orderId example",
                        "name": "orderId",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.PaymentResponse"
                            }
                        }
                    }
                }
            }
        },
        "/payment/save-card": {
            "post": {
                "description": "Creates a new payment with a CC token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Payment"
                ],
                "summary": "New Payment with Card's token",
                "parameters": [
                    {
                        "type": "integer",
                        "example": 1,
                        "description": "order_id example",
                        "name": "order_id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.PaymentResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httputil.HTTPError400"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/httputil.HTTPError404"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/httputil.HTTPError500"
                        }
                    }
                }
            }
        },
        "/product/new": {
            "post": {
                "description": "save Product in database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Product"
                ],
                "summary": "Insert Product",
                "parameters": [
                    {
                        "description": "Product example",
                        "name": "example",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.ProductRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.ProductResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httputil.HTTPError400"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/httputil.HTTPError404"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/httputil.HTTPError500"
                        }
                    }
                }
            }
        },
        "/product/products": {
            "get": {
                "description": "Select all Products",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Product"
                ],
                "summary": "Select all Products",
                "parameters": [
                    {
                        "type": "integer",
                        "example": 0,
                        "description": "start example",
                        "name": "start",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "example": 10,
                        "description": "count example",
                        "name": "count",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.ProductResponse"
                            }
                        }
                    }
                }
            }
        },
        "/product/update/{id}": {
            "put": {
                "description": "Updates a Product in database (id req)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Product"
                ],
                "summary": "Updates Product",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "example: 1",
                        "name": "int",
                        "in": "query",
                        "required": true
                    },
                    {
                        "description": "Product example",
                        "name": "example",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.ProductRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.ProductResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httputil.HTTPError400"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/httputil.HTTPError404"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/httputil.HTTPError500"
                        }
                    }
                }
            }
        },
        "/product/{id}": {
            "get": {
                "description": "Get one Product from ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Product"
                ],
                "summary": "Select Product",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "example: 1",
                        "name": "int",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.ProductResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httputil.HTTPError400"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/httputil.HTTPError404"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/httputil.HTTPError500"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "httputil.HTTPError400": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 400
                },
                "error": {
                    "type": "string",
                    "example": "Invalid request body or query parameters"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "httputil.HTTPError404": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 404
                },
                "error": {
                    "type": "string",
                    "example": "Page not found"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "httputil.HTTPError500": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 500
                },
                "error": {
                    "type": "string",
                    "example": "Internal Server Error"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "model.Address": {
            "type": "object",
            "properties": {
                "city": {
                    "type": "string",
                    "example": "Volta Redonda"
                },
                "created_at": {
                    "type": "string"
                },
                "number": {
                    "type": "string",
                    "example": "1106"
                },
                "state": {
                    "type": "string",
                    "example": "Rio de Janeiro"
                },
                "street": {
                    "type": "string",
                    "example": "Servidão B-1"
                },
                "zip_code": {
                    "type": "string",
                    "example": "27275-595"
                }
            }
        },
        "model.Card": {
            "type": "object",
            "properties": {
                "brand": {
                    "type": "string",
                    "example": "Visa"
                },
                "card_id": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "last_4": {
                    "type": "string",
                    "maxLength": 4,
                    "minLength": 4,
                    "example": "1234"
                },
                "payer_id": {
                    "type": "integer",
                    "minimum": 1,
                    "example": 1
                }
            }
        },
        "model.CardRequest": {
            "type": "object",
            "properties": {
                "brand": {
                    "type": "string",
                    "example": "Visa"
                },
                "last_4": {
                    "type": "string",
                    "example": "1234"
                },
                "token": {
                    "type": "string"
                }
            }
        },
        "model.CardResponse": {
            "type": "object",
            "properties": {
                "brand": {
                    "type": "string",
                    "example": "Visa"
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "last_4": {
                    "type": "string",
                    "example": "1234"
                },
                "token": {
                    "type": "string"
                }
            }
        },
        "model.OrderRequest": {
            "type": "object",
            "properties": {
                "currency": {
                    "type": "string",
                    "maxLength": 3,
                    "minLength": 3
                },
                "product_id": {
                    "type": "integer",
                    "example": 1
                },
                "total_fees": {
                    "type": "integer",
                    "example": 3
                }
            }
        },
        "model.OrderResponse": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "finished": {
                    "type": "boolean"
                },
                "id": {
                    "type": "integer"
                },
                "payments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.PaymentResponse"
                    }
                },
                "product": {
                    "$ref": "#/definitions/model.Product"
                },
                "total_fees": {
                    "type": "integer"
                }
            }
        },
        "model.Payer": {
            "type": "object",
            "properties": {
                "address": {
                    "$ref": "#/definitions/model.Address"
                },
                "birth_date": {
                    "type": "string",
                    "example": "24/07/1992"
                },
                "card_id": {
                    "type": "integer"
                },
                "country": {
                    "type": "string",
                    "maxLength": 2,
                    "minLength": 2,
                    "example": "UY"
                },
                "created_at": {
                    "type": "string"
                },
                "document": {
                    "type": "string",
                    "example": "23415162"
                },
                "email": {
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 6,
                    "example": "jhondoe@mail.com"
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "name": {
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 6,
                    "example": "Jhon Doe"
                },
                "phone": {
                    "type": "string",
                    "example": "+123456789"
                },
                "updated_at": {
                    "type": "string"
                },
                "user_reference": {
                    "type": "string",
                    "example": "12345"
                }
            }
        },
        "model.PayerResponse": {
            "type": "object",
            "properties": {
                "address": {
                    "$ref": "#/definitions/model.Address"
                },
                "birth_date": {
                    "type": "string",
                    "example": "24/07/1992"
                },
                "card_id": {
                    "type": "integer",
                    "example": 1
                },
                "created_at": {
                    "type": "string"
                },
                "document": {
                    "type": "string"
                },
                "email": {
                    "type": "string",
                    "example": "jhondoe@mail.com"
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "name": {
                    "type": "string",
                    "example": "Jhon Doe"
                },
                "phone": {
                    "type": "string",
                    "example": "+123456789"
                },
                "updated_at": {
                    "type": "string"
                },
                "user_reference": {
                    "type": "string",
                    "example": "12345"
                }
            }
        },
        "model.PaymentResponse": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "number",
                    "example": 125
                },
                "card": {
                    "$ref": "#/definitions/model.Card"
                },
                "country": {
                    "type": "string",
                    "example": "UY"
                },
                "created_at": {
                    "type": "string"
                },
                "currency": {
                    "type": "string",
                    "example": "USD"
                },
                "id": {
                    "type": "string",
                    "example": "PAY2323243343543"
                },
                "order_number": {
                    "type": "string"
                },
                "payment_method_flow": {
                    "type": "string"
                },
                "payment_method_id": {
                    "type": "string",
                    "example": "CARD"
                }
            }
        },
        "model.Product": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "number",
                    "example": 5000
                },
                "currency": {
                    "type": "string",
                    "maxLength": 3,
                    "minLength": 3,
                    "example": "USD"
                },
                "description": {
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 6,
                    "example": "Curso de Programacion"
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "name": {
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 6,
                    "example": "programacion en C"
                }
            }
        },
        "model.ProductRequest": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "number",
                    "example": 5000
                },
                "currency": {
                    "type": "string",
                    "maxLength": 3,
                    "minLength": 3,
                    "example": "USD"
                },
                "description": {
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 6,
                    "example": "Curso de Programacion"
                },
                "name": {
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 6,
                    "example": "programacion en C"
                }
            }
        },
        "model.ProductResponse": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "number",
                    "example": 5000
                },
                "created_at": {
                    "type": "string"
                },
                "currency": {
                    "type": "string",
                    "maxLength": 3,
                    "minLength": 3,
                    "example": "USD"
                },
                "description": {
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 6,
                    "example": "Curso de Programacion"
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "name": {
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 6,
                    "example": "programacion en C"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "ApiKeyAuth": {
            "description": "Description for what is this security definition being used",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        },
        "BasicAuth": {
            "type": "basic"
        },
        "OAuth2AccessCode": {
            "type": "oauth2",
            "flow": "accessCode",
            "authorizationUrl": "https://example.com/oauth/authorize",
            "tokenUrl": "https://example.com/oauth/token",
            "scopes": {
                "admin": "\t\t\t\t\t\t\tGrants read and write access to administrative information"
            }
        },
        "OAuth2Application": {
            "type": "oauth2",
            "flow": "application",
            "tokenUrl": "https://example.com/oauth/token",
            "scopes": {
                "admin": "\t\t\t\t\t\t\tGrants read and write access to administrative information",
                "write": "\t\t\t\t\t\t\tGrants write access"
            }
        },
        "OAuth2Implicit": {
            "type": "oauth2",
            "flow": "implicit",
            "authorizationUrl": "https://example.com/oauth/authorize",
            "scopes": {
                "admin": "\t\t\t\t\t\t\tGrants read and write access to administrative information",
                "write": "\t\t\t\t\t\t\tGrants write access"
            }
        },
        "OAuth2Password": {
            "type": "oauth2",
            "flow": "password",
            "tokenUrl": "https://example.com/oauth/token",
            "scopes": {
                "admin": "\t\t\t\t\t\t\tGrants read and write access to administrative information",
                "read": "\t\t\t\t\t\t\t\tGrants read access",
                "write": "\t\t\t\t\t\t\tGrants write access"
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/api/v1",
	Schemes:          []string{},
	Title:            "Swagger System Payment",
	Description:      "API implementation.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
