basePath: /api/v1
definitions:
  dlocal.Address:
    properties:
      city:
        type: string
      number:
        type: string
      state:
        type: string
      street:
        type: string
      zip_code:
        type: string
    type: object
  dlocal.Card:
    properties:
      cvv:
        example: "123"
        maxLength: 3
        minLength: 3
        type: string
      expiration_month:
        example: 3
        maximum: 12
        minimum: 1
        type: integer
      expiration_year:
        example: 2033
        type: integer
      holder_name:
        example: Jhon Doe
        type: string
      number:
        example: "4111111111111111"
        type: string
    type: object
  dlocal.CardResponse:
    properties:
      brand:
        type: string
      card_id:
        type: string
      expiration_month:
        type: string
      expiration_year:
        type: string
      holder_name:
        type: string
      last4:
        type: string
    type: object
  dlocal.Payer:
    properties:
      address:
        $ref: '#/definitions/dlocal.Address'
      birth_date:
        type: string
      device_id:
        type: string
      document:
        type: string
      email:
        maxLength: 100
        minLength: 6
        type: string
      ip:
        type: string
      name:
        maxLength: 100
        minLength: 6
        type: string
      phone:
        type: string
      user_reference:
        type: string
    type: object
  dlocal.PaymentRequestBody:
    properties:
      amount:
        type: number
      card:
        $ref: '#/definitions/dlocal.SecureCard'
      country:
        type: string
      currency:
        type: string
      notification_url:
        type: string
      order_id:
        type: string
      payer:
        $ref: '#/definitions/dlocal.Payer'
      payment_method_flow:
        type: string
      payment_method_id:
        type: string
    type: object
  dlocal.PaymentResponseBody:
    properties:
      amount:
        type: number
      approved_date:
        type: string
      card:
        $ref: '#/definitions/dlocal.CardResponse'
      country:
        type: string
      created_date:
        type: string
      currency:
        type: string
      id:
        type: string
      notification_url:
        type: string
      order_id:
        type: string
      payment_method_flow:
        type: string
      payment_method_id:
        type: string
      payment_method_type:
        type: string
      status:
        type: string
      status_code:
        type: string
      status_detail:
        type: string
    type: object
  dlocal.SecureCard:
    properties:
      token:
        type: string
    type: object
  dlocal.SecurePaymentRequestBody:
    properties:
      amount:
        type: number
      card:
        $ref: '#/definitions/dlocal.Card'
      country:
        type: string
      currency:
        type: string
      notification_url:
        type: string
      order_id:
        type: string
      payer:
        $ref: '#/definitions/dlocal.Payer'
      payment_method_flow:
        type: string
      payment_method_id:
        type: string
    type: object
  httputil.HTTPError400:
    properties:
      code:
        example: 400
        type: integer
      error:
        example: Invalid request body or query parameters
        type: string
    type: object
  httputil.HTTPError404:
    properties:
      code:
        example: 404
        type: integer
      error:
        example: Page not found
        type: string
    type: object
  httputil.HTTPError500:
    properties:
      code:
        example: 500
        type: integer
      error:
        example: Internal Server Error
        type: string
    type: object
  model.Address:
    properties:
      city:
        example: Volta Redonda
        type: string
      number:
        example: "1106"
        type: string
      state:
        example: Rio de Janeiro
        type: string
      street:
        example: Servidão B-1
        type: string
      zip_code:
        example: 27275-595
        type: string
    type: object
  model.AddressResponse:
    properties:
      city:
        example: Volta Redonda
        type: string
      created_at:
        type: string
      id:
        example: 1
        type: integer
      number:
        example: "1106"
        type: string
      state:
        example: Rio de Janeiro
        type: string
      street:
        example: Servidão B-1
        type: string
      zip_code:
        example: 27275-595
        type: string
    type: object
  model.Card:
    properties:
      brand:
        example: Visa
        type: string
      id:
        example: 1
        type: integer
      last4:
        example: "1234"
        type: string
      payerID:
        example: 1
        minimum: 1
        type: integer
      token:
        type: string
    type: object
  model.Order:
    properties:
      id:
        example: 1
        type: integer
      payerID:
        example: 1
        type: integer
      productID:
        example: 1
        type: integer
      totalFees:
        example: 3
        maximum: 24
        minimum: 1
        type: integer
    type: object
  model.OrderResponse:
    properties:
      created_at:
        type: string
      finished:
        type: boolean
      id:
        type: integer
      payer:
        $ref: '#/definitions/model.PayerResponse'
      payments:
        items:
          $ref: '#/definitions/model.PaymentResponse'
        type: array
      product:
        $ref: '#/definitions/model.Product'
      total_fees:
        type: integer
      updated_at:
        type: string
    type: object
  model.Payer:
    properties:
      address:
        $ref: '#/definitions/model.Address'
      birth_date:
        example: 24/07/1992
        type: string
      document:
        example: "23415162"
        type: string
      email:
        example: jhondoe@mail.com
        maxLength: 100
        minLength: 6
        type: string
      name:
        example: Jhon Doe
        maxLength: 100
        minLength: 6
        type: string
      phone:
        example: "+123456789"
        type: string
      user_reference:
        example: "12345"
        type: string
    type: object
  model.PayerResponse:
    properties:
      address:
        $ref: '#/definitions/model.AddressResponse'
      birth_date:
        example: 24/07/1992
        type: string
      created_at:
        type: string
      document:
        type: string
      email:
        example: jhondoe@mail.com
        type: string
      id:
        example: 1
        type: integer
      name:
        example: Jhon Doe
        type: string
      phone:
        example: "+123456789"
        type: string
      updated_at:
        type: string
      user_reference:
        example: "12345"
        type: string
    type: object
  model.PaymentResponse:
    properties:
      amount:
        example: 125
        type: number
      card:
        $ref: '#/definitions/model.Card'
      country:
        example: UY
        type: string
      created_at:
        type: string
      currency:
        example: USD
        type: string
      id:
        example: PAY2323243343543
        type: string
      order_number:
        type: string
      payment_method_flow:
        type: string
      payment_method_id:
        example: CARD
        type: string
    type: object
  model.Product:
    properties:
      amount:
        example: 5000
        type: number
      currency:
        example: USD
        maxLength: 3
        minLength: 3
        type: string
      description:
        example: Curso de Programacion
        maxLength: 100
        minLength: 6
        type: string
      name:
        example: programacion en C
        maxLength: 100
        minLength: 6
        type: string
    type: object
  model.ProductResponse:
    properties:
      amount:
        example: 5000
        type: number
      created_at:
        type: string
      currency:
        example: USD
        maxLength: 3
        minLength: 3
        type: string
      description:
        example: Curso de Programacion
        maxLength: 100
        minLength: 6
        type: string
      id:
        example: 1
        type: integer
      name:
        example: programacion en C
        maxLength: 100
        minLength: 6
        type: string
      updated_at:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: API implementation.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Swagger System Payment
  version: "1.0"
paths:
  /dlocal/card:
    post:
      consumes:
      - application/json
      description: Creates card and saves card token in database
      parameters:
      - description: Card example
        in: body
        name: example
        required: true
        schema:
          $ref: '#/definitions/dlocal.Card'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dlocal.CardResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError400'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.HTTPError404'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HTTPError500'
      summary: Create Card with Dlocal
      tags:
      - Dlocal
  /dlocal/payment:
    post:
      consumes:
      - application/json
      description: Makes a new Payment with the Dlocal API
      parameters:
      - description: Payment with Dlocal example
        in: body
        name: example
        required: true
        schema:
          $ref: '#/definitions/dlocal.PaymentRequestBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dlocal.PaymentResponseBody'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError400'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.HTTPError404'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HTTPError500'
      summary: Make Payment with Dlocal
      tags:
      - Dlocal
  /dlocal/secure-payment:
    post:
      consumes:
      - application/json
      description: Makes a new Secure Payment with the Dlocal API
      parameters:
      - description: Secure Payment with Dlocal example
        in: body
        name: example
        required: true
        schema:
          $ref: '#/definitions/dlocal.SecurePaymentRequestBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dlocal.SecurePaymentRequestBody'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError400'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.HTTPError404'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HTTPError500'
      summary: Make Secure Payment with Dlocal
      tags:
      - Dlocal
  /order/{id}:
    get:
      consumes:
      - application/json
      description: Get one Order from ID
      parameters:
      - description: 'example: 1'
        in: query
        name: int
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.OrderResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError400'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.HTTPError404'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HTTPError500'
      summary: Select Order
      tags:
      - Order
  /order/new:
    post:
      consumes:
      - application/json
      description: save Order in database
      parameters:
      - description: Order example
        in: body
        name: example
        required: true
        schema:
          $ref: '#/definitions/model.Order'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Order'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError400'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.HTTPError404'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HTTPError500'
      summary: Insert Order
      tags:
      - Order
  /order/orders:
    get:
      consumes:
      - application/json
      description: Select all Orders
      parameters:
      - description: start example
        example: 0
        in: query
        name: start
        required: true
        type: integer
      - description: count example
        example: 10
        in: query
        name: count
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.OrderResponse'
            type: array
      summary: Select all Orders
      tags:
      - Order
  /payer/{id}:
    get:
      description: Get one Payer from ID
      parameters:
      - description: 'example: 1'
        in: query
        name: int
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.PayerResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError400'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.HTTPError404'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HTTPError500'
      summary: Select Payer
      tags:
      - Payer
  /payer/new:
    post:
      consumes:
      - application/json
      description: save payer in database
      parameters:
      - description: Payer example
        in: body
        name: example
        required: true
        schema:
          $ref: '#/definitions/model.Payer'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.PayerResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError400'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.HTTPError404'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HTTPError500'
      summary: Insert Payer
      tags:
      - Payer
  /payer/payers:
    get:
      description: Select all Payers
      parameters:
      - description: start example
        example: 0
        in: query
        name: start
        required: true
        type: integer
      - description: count example
        example: 10
        in: query
        name: count
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.PayerResponse'
            type: array
      summary: Select all Payers
      tags:
      - Payer
  /payer/update/{id}:
    put:
      consumes:
      - application/json
      description: Updates a payer in database (id req)
      parameters:
      - description: 'example: 1'
        in: query
        name: int
        required: true
        type: integer
      - description: Payer example
        in: body
        name: example
        required: true
        schema:
          $ref: '#/definitions/model.Payer'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.PayerResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError400'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.HTTPError404'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HTTPError500'
      summary: Updates Payer
      tags:
      - Payer
  /product/{id}:
    get:
      description: Get one Product from ID
      parameters:
      - description: 'example: 1'
        in: query
        name: int
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ProductResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError400'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.HTTPError404'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HTTPError500'
      summary: Select Product
      tags:
      - Product
  /product/new:
    post:
      consumes:
      - application/json
      description: save Product in database
      parameters:
      - description: Product example
        in: body
        name: example
        required: true
        schema:
          $ref: '#/definitions/model.Product'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ProductResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError400'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.HTTPError404'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HTTPError500'
      summary: Insert Product
      tags:
      - Product
  /product/products:
    get:
      description: Select all Products
      parameters:
      - description: start example
        example: 0
        in: query
        name: start
        required: true
        type: integer
      - description: count example
        example: 10
        in: query
        name: count
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.ProductResponse'
            type: array
      summary: Select all Products
      tags:
      - Product
  /product/update/{id}:
    put:
      consumes:
      - application/json
      description: Updates a Product in database (id req)
      parameters:
      - description: 'example: 1'
        in: query
        name: int
        required: true
        type: integer
      - description: Product example
        in: body
        name: example
        required: true
        schema:
          $ref: '#/definitions/model.Product'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ProductResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError400'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.HTTPError404'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HTTPError500'
      summary: Updates Product
      tags:
      - Product
securityDefinitions:
  ApiKeyAuth:
    description: Description for what is this security definition being used
    in: header
    name: Authorization
    type: apiKey
  BasicAuth:
    type: basic
  OAuth2AccessCode:
    authorizationUrl: https://example.com/oauth/authorize
    flow: accessCode
    scopes:
      admin: "\t\t\t\t\t\t\tGrants read and write access to administrative information"
    tokenUrl: https://example.com/oauth/token
    type: oauth2
  OAuth2Application:
    flow: application
    scopes:
      admin: "\t\t\t\t\t\t\tGrants read and write access to administrative information"
      write: "\t\t\t\t\t\t\tGrants write access"
    tokenUrl: https://example.com/oauth/token
    type: oauth2
  OAuth2Implicit:
    authorizationUrl: https://example.com/oauth/authorize
    flow: implicit
    scopes:
      admin: "\t\t\t\t\t\t\tGrants read and write access to administrative information"
      write: "\t\t\t\t\t\t\tGrants write access"
    type: oauth2
  OAuth2Password:
    flow: password
    scopes:
      admin: "\t\t\t\t\t\t\tGrants read and write access to administrative information"
      read: "\t\t\t\t\t\t\t\tGrants read access"
      write: "\t\t\t\t\t\t\tGrants write access"
    tokenUrl: https://example.com/oauth/token
    type: oauth2
swagger: "2.0"
